{"version":3,"file":"color-picker.directive.js","sourceRoot":"","sources":["../../src/lib/color-picker.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { OnInit, OnChanges, Directive, Input, Output, EventEmitter, Injector, ApplicationRef, ElementRef, ViewContainerRef, ReflectiveInjector, ComponentFactoryResolver, ComponentRef, OnDestroy } from '@angular/core';\n\nimport { ColorPickerService } from './color-picker.service';\nimport { ColorPickerComponent } from './color-picker.component';\n\nimport { SliderPosition, SliderDimension} from './helpers';\n\n@Directive({\n    selector: '[colorPicker]',\n    host: {\n      '(click)': 'inputFocus()',\n      '(focus)': 'inputFocus()',\n      '(input)': 'inputChange($event.target.value)'\n    }\n})\nexport class ColorPickerDirective implements OnInit, OnChanges, OnDestroy {\n    @Input('colorPicker') colorPicker: string;\n    @Input('cpToggle') cpToggle: boolean;\n    @Input('cpPosition') cpPosition: string = 'right';\n    @Input('cpPositionOffset') cpPositionOffset: string = '0%';\n    @Input('cpPositionRelativeToArrow') cpPositionRelativeToArrow: boolean = false;\n    @Input('cpOutputFormat') cpOutputFormat: string = 'hex';\n    @Input('cpPresetLabel') cpPresetLabel: string = 'Preset colors';\n    @Input('cpPresetEmptyMessage') cpPresetEmptyMessage: string = 'No colors added';\n    @Input('cpPresetEmptyMessageClass') cpPresetEmptyMessageClass: string = 'preset-empty-message';\n    @Input('cpPresetColors') cpPresetColors: Array<string>;\n    @Input('cpMaxPresetColorsLength') cpMaxPresetColorsLength: number = 6;\n    @Input('cpCancelButton') cpCancelButton: boolean = false;\n    @Input('cpCancelButtonClass') cpCancelButtonClass: string = 'cp-cancel-button-class';\n    @Input('cpCancelButtonText') cpCancelButtonText: string = 'Cancel';\n    @Input('cpOKButton') cpOKButton: boolean = false;\n    @Input('cpOKButtonClass') cpOKButtonClass: string = 'cp-ok-button-class';\n    @Input('cpOKButtonText') cpOKButtonText: string = 'OK';\n    @Input('cpAddColorButton') cpAddColorButton: boolean = false;\n    @Input('cpAddColorButtonClass') cpAddColorButtonClass: string = 'cp-add-color-button-class';\n    @Input('cpAddColorButtonText') cpAddColorButtonText: string = 'Add color';\n    @Input('cpRemoveColorButtonClass') cpRemoveColorButtonClass: string = 'cp-remove-color-button-class';\n    @Input('cpFallbackColor') cpFallbackColor: string = '#fff';\n    @Input('cpHeight') cpHeight: string = 'auto';\n    @Input('cpWidth') cpWidth: string = '230px';\n    @Input('cpIgnoredElements') cpIgnoredElements: any = [];\n    @Input('cpDisableInput') cpDisableInput: boolean = false;\n    @Input('cpDialogDisplay') cpDialogDisplay: string = 'popup';\n    @Input('cpSaveClickOutside') cpSaveClickOutside: boolean = true;\n    @Input('cpAlphaChannel') cpAlphaChannel: string = 'enabled';\n    @Input('cpUseRootViewContainer') cpUseRootViewContainer: boolean = false;\n\n    @Output('cpInputChange') cpInputChange = new EventEmitter<any>(true);\n\n    @Output('cpToggleChange') cpToggleChange = new EventEmitter<boolean>(true);\n\n    @Output('cpSliderChange') cpSliderChange = new EventEmitter<any>(true);\n    @Output('cpSliderDragEnd') cpSliderDragEnd = new EventEmitter<string>(true);\n    @Output('cpSliderDragStart') cpSliderDragStart = new EventEmitter<string>(true);\n\n    @Output('colorPickerCancel') colorPickerCancel = new EventEmitter<string>(true);\n    @Output('colorPickerSelect') colorPickerSelect = new EventEmitter<string>(true);\n    @Output('colorPickerChange') colorPickerChange = new EventEmitter<string>(false);\n    @Output('cpPresetColorsChange') presetColorsChange = new EventEmitter<any>(true);\n\n    private dialog: any;\n    private created: boolean;\n    private ignoreChanges: boolean = false;\n    private cmpRef: ComponentRef<ColorPickerComponent>;\n\n    constructor(private injector: Injector, private cfr: ComponentFactoryResolver,\n      private appRef: ApplicationRef, private vcRef: ViewContainerRef, private elRef: ElementRef,\n      private service: ColorPickerService)\n    {\n        this.created = false;\n    }\n\n    ngOnChanges(changes: any): void {\n        if (changes.cpToggle) {\n            if (changes.cpToggle.currentValue) this.openDialog();\n            if (!changes.cpToggle.currentValue && this.dialog) this.dialog.closeColorPicker();\n        }\n        if (changes.colorPicker) {\n            if (this.dialog && !this.ignoreChanges) {\n                if (this.cpDialogDisplay === 'inline') {\n                    this.dialog.setInitialColor(changes.colorPicker.currentValue);\n                }\n                this.dialog.setColorFromString(changes.colorPicker.currentValue, false);\n\n            }\n            this.ignoreChanges = false;\n        }\n        if (changes.cpPresetLabel || changes.cpPresetColors) {\n            if (this.dialog) {\n                this.dialog.setPresetConfig(this.cpPresetLabel, this.cpPresetColors);\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.colorPicker = this.colorPicker || this.cpFallbackColor || 'rgba(0, 0, 0, 1)';\n        /*let hsva = this.service.stringToHsva(this.colorPicker);\n        if (hsva === null) hsva = this.service.stringToHsva(this.colorPicker, true);\n        if (hsva == null) {\n            hsva = this.service.stringToHsva(this.cpFallbackColor);\n        }\n        let color = this.service.outputFormat(hsva, this.cpOutputFormat, this.cpAlphaChannel);\n        if (color !== this.colorPicker) {\n            //setTimeout(() => {\n              this.colorPickerChange.emit(color);\n              this.cdr.detectChanges();\n            //}, 0);\n        }*/\n    }\n\n    ngOnDestroy() {\n        if (this.cmpRef !== undefined) {\n            this.cmpRef.destroy();\n        }\n    }\n\n    openDialog() {\n        this.colorPicker = this.colorPicker || this.cpFallbackColor || 'rgba(0, 0, 0, 1)';\n\n        if (!this.created) {\n            this.created = true;\n            let vcRef = this.vcRef;\n            if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {\n              const classOfRootComponent = this.appRef.componentTypes[0];\n              const appInstance = this.injector.get(classOfRootComponent);\n              vcRef = appInstance.vcRef || appInstance.viewContainerRef || this.vcRef;\n              if (vcRef === this.vcRef) {\n                console.warn('You are using cpUseRootViewContainer, but the root component is not exposing viewContainerRef!' +\n                  'Please expose it by adding \\'public vcRef: ViewContainerRef\\' to the constructor.');\n              }\n            }\n            const compFactory = this.cfr.resolveComponentFactory(ColorPickerComponent);\n            const injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);\n            this.cmpRef = vcRef.createComponent(compFactory, 0, injector, []);\n            this.cmpRef.instance.setDialog(this, this.elRef, this.colorPicker, this.cpPosition, this.cpPositionOffset,\n                this.cpPositionRelativeToArrow, this.cpOutputFormat, this.cpPresetLabel, this.cpPresetEmptyMessage,\n                this.cpPresetEmptyMessageClass, this.cpPresetColors, this.cpMaxPresetColorsLength,\n                this.cpCancelButton, this.cpCancelButtonClass, this.cpCancelButtonText,\n                this.cpOKButton, this.cpOKButtonClass, this.cpOKButtonText,\n                this.cpAddColorButton, this.cpAddColorButtonClass, this.cpAddColorButtonText,\n                this.cpRemoveColorButtonClass,\n                this.cpHeight, this.cpWidth, this.cpIgnoredElements,\n                this.cpDialogDisplay, this.cpSaveClickOutside, this.cpAlphaChannel, this.cpDisableInput, this.cpUseRootViewContainer);\n            this.dialog = this.cmpRef.instance;\n\n            if (this.vcRef !== vcRef) {\n                this.cmpRef.changeDetectorRef.detectChanges();\n            }\n        } else if (this.dialog) {\n            this.dialog.openDialog(this.colorPicker);\n        }\n    }\n\n    toggle(value: boolean) {\n        this.cpToggleChange.emit(value);\n    }\n\n    colorChanged(value: string, ignore: boolean = true) {\n        this.ignoreChanges = ignore;\n        this.colorPickerChange.emit(value);\n    }\n\n    colorCanceled() {\n      this.colorPickerCancel.emit();\n    }\n\n    colorSelected(value: string) {\n        this.colorPickerSelect.emit(value);\n    }\n\n    presetColorsChanged(value: Array<any>) {\n        this.presetColorsChange.emit(value);\n    }\n\n    inputFocus() {\n        if (this.cpIgnoredElements.filter((item: any) => item === this.elRef.nativeElement).length === 0) {\n            this.openDialog();\n        }\n    }\n\n    inputChange(value: string) {\n      if (this.dialog) {\n        this.dialog.setColorFromString(value, true);\n      } else {\n        this.colorPicker = value || this.cpFallbackColor || 'rgba(0, 0, 0, 1)';\n\n        this.colorPickerChange.emit(this.colorPicker);\n      }\n    }\n\n    inputChanged(event: any) {\n        this.cpInputChange.emit(event);\n    }\n\n    sliderChanged(event: any) {\n        this.cpSliderChange.emit(event);\n    }\n\n    sliderDragEnd(event: any) {\n        this.cpSliderDragEnd.emit(event);\n    }\n\n    sliderDragStart(event: any) {\n        this.cpSliderDragStart.emit(event);\n    }\n}\n"]}