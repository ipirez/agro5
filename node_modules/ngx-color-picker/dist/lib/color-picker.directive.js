/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, Injector, ApplicationRef, ElementRef, ViewContainerRef, ReflectiveInjector, ComponentFactoryResolver } from "@angular/core";
import { ColorPickerService } from "./color-picker.service";
import { ColorPickerComponent } from "./color-picker.component";
var ColorPickerDirective = (function () {
    function ColorPickerDirective(injector, cfr, appRef, vcRef, elRef, service) {
        this.injector = injector;
        this.cfr = cfr;
        this.appRef = appRef;
        this.vcRef = vcRef;
        this.elRef = elRef;
        this.service = service;
        this.cpPosition = 'right';
        this.cpPositionOffset = '0%';
        this.cpPositionRelativeToArrow = false;
        this.cpOutputFormat = 'hex';
        this.cpPresetLabel = 'Preset colors';
        this.cpPresetEmptyMessage = 'No colors added';
        this.cpPresetEmptyMessageClass = 'preset-empty-message';
        this.cpMaxPresetColorsLength = 6;
        this.cpCancelButton = false;
        this.cpCancelButtonClass = 'cp-cancel-button-class';
        this.cpCancelButtonText = 'Cancel';
        this.cpOKButton = false;
        this.cpOKButtonClass = 'cp-ok-button-class';
        this.cpOKButtonText = 'OK';
        this.cpAddColorButton = false;
        this.cpAddColorButtonClass = 'cp-add-color-button-class';
        this.cpAddColorButtonText = 'Add color';
        this.cpRemoveColorButtonClass = 'cp-remove-color-button-class';
        this.cpFallbackColor = '#fff';
        this.cpHeight = 'auto';
        this.cpWidth = '230px';
        this.cpIgnoredElements = [];
        this.cpDisableInput = false;
        this.cpDialogDisplay = 'popup';
        this.cpSaveClickOutside = true;
        this.cpAlphaChannel = 'enabled';
        this.cpUseRootViewContainer = false;
        this.cpInputChange = new EventEmitter(true);
        this.cpToggleChange = new EventEmitter(true);
        this.cpSliderChange = new EventEmitter(true);
        this.cpSliderDragEnd = new EventEmitter(true);
        this.cpSliderDragStart = new EventEmitter(true);
        this.colorPickerCancel = new EventEmitter(true);
        this.colorPickerSelect = new EventEmitter(true);
        this.colorPickerChange = new EventEmitter(false);
        this.presetColorsChange = new EventEmitter(true);
        this.ignoreChanges = false;
        this.created = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ColorPickerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.cpToggle) {
            if (changes.cpToggle.currentValue)
                this.openDialog();
            if (!changes.cpToggle.currentValue && this.dialog)
                this.dialog.closeColorPicker();
        }
        if (changes.colorPicker) {
            if (this.dialog && !this.ignoreChanges) {
                if (this.cpDialogDisplay === 'inline') {
                    this.dialog.setInitialColor(changes.colorPicker.currentValue);
                }
                this.dialog.setColorFromString(changes.colorPicker.currentValue, false);
            }
            this.ignoreChanges = false;
        }
        if (changes.cpPresetLabel || changes.cpPresetColors) {
            if (this.dialog) {
                this.dialog.setPresetConfig(this.cpPresetLabel, this.cpPresetColors);
            }
        }
    };
    /**
     * @return {?}
     */
    ColorPickerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.colorPicker = this.colorPicker || this.cpFallbackColor || 'rgba(0, 0, 0, 1)';
        /*let hsva = this.service.stringToHsva(this.colorPicker);
                if (hsva === null) hsva = this.service.stringToHsva(this.colorPicker, true);
                if (hsva == null) {
                    hsva = this.service.stringToHsva(this.cpFallbackColor);
                }
                let color = this.service.outputFormat(hsva, this.cpOutputFormat, this.cpAlphaChannel);
                if (color !== this.colorPicker) {
                    //setTimeout(() => {
                      this.colorPickerChange.emit(color);
                      this.cdr.detectChanges();
                    //}, 0);
                }*/
    };
    /**
     * @return {?}
     */
    ColorPickerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.cmpRef !== undefined) {
            this.cmpRef.destroy();
        }
    };
    /**
     * @return {?}
     */
    ColorPickerDirective.prototype.openDialog = /**
     * @return {?}
     */
    function () {
        this.colorPicker = this.colorPicker || this.cpFallbackColor || 'rgba(0, 0, 0, 1)';
        if (!this.created) {
            this.created = true;
            var /** @type {?} */ vcRef = this.vcRef;
            if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {
                var /** @type {?} */ classOfRootComponent = this.appRef.componentTypes[0];
                var /** @type {?} */ appInstance = this.injector.get(classOfRootComponent);
                vcRef = appInstance.vcRef || appInstance.viewContainerRef || this.vcRef;
                if (vcRef === this.vcRef) {
                    console.warn('You are using cpUseRootViewContainer, but the root component is not exposing viewContainerRef!' +
                        'Please expose it by adding \'public vcRef: ViewContainerRef\' to the constructor.');
                }
            }
            var /** @type {?} */ compFactory = this.cfr.resolveComponentFactory(ColorPickerComponent);
            var /** @type {?} */ injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);
            this.cmpRef = vcRef.createComponent(compFactory, 0, injector, []);
            this.cmpRef.instance.setDialog(this, this.elRef, this.colorPicker, this.cpPosition, this.cpPositionOffset, this.cpPositionRelativeToArrow, this.cpOutputFormat, this.cpPresetLabel, this.cpPresetEmptyMessage, this.cpPresetEmptyMessageClass, this.cpPresetColors, this.cpMaxPresetColorsLength, this.cpCancelButton, this.cpCancelButtonClass, this.cpCancelButtonText, this.cpOKButton, this.cpOKButtonClass, this.cpOKButtonText, this.cpAddColorButton, this.cpAddColorButtonClass, this.cpAddColorButtonText, this.cpRemoveColorButtonClass, this.cpHeight, this.cpWidth, this.cpIgnoredElements, this.cpDialogDisplay, this.cpSaveClickOutside, this.cpAlphaChannel, this.cpDisableInput, this.cpUseRootViewContainer);
            this.dialog = this.cmpRef.instance;
            if (this.vcRef !== vcRef) {
                this.cmpRef.changeDetectorRef.detectChanges();
            }
        }
        else if (this.dialog) {
            this.dialog.openDialog(this.colorPicker);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ColorPickerDirective.prototype.toggle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.cpToggleChange.emit(value);
    };
    /**
     * @param {?} value
     * @param {?=} ignore
     * @return {?}
     */
    ColorPickerDirective.prototype.colorChanged = /**
     * @param {?} value
     * @param {?=} ignore
     * @return {?}
     */
    function (value, ignore) {
        if (ignore === void 0) { ignore = true; }
        this.ignoreChanges = ignore;
        this.colorPickerChange.emit(value);
    };
    /**
     * @return {?}
     */
    ColorPickerDirective.prototype.colorCanceled = /**
     * @return {?}
     */
    function () {
        this.colorPickerCancel.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ColorPickerDirective.prototype.colorSelected = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.colorPickerSelect.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ColorPickerDirective.prototype.presetColorsChanged = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.presetColorsChange.emit(value);
    };
    /**
     * @return {?}
     */
    ColorPickerDirective.prototype.inputFocus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.cpIgnoredElements.filter(function (item) { return item === _this.elRef.nativeElement; }).length === 0) {
            this.openDialog();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ColorPickerDirective.prototype.inputChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.dialog) {
            this.dialog.setColorFromString(value, true);
        }
        else {
            this.colorPicker = value || this.cpFallbackColor || 'rgba(0, 0, 0, 1)';
            this.colorPickerChange.emit(this.colorPicker);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColorPickerDirective.prototype.inputChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.cpInputChange.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColorPickerDirective.prototype.sliderChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.cpSliderChange.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColorPickerDirective.prototype.sliderDragEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.cpSliderDragEnd.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColorPickerDirective.prototype.sliderDragStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.cpSliderDragStart.emit(event);
    };
    ColorPickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[colorPicker]',
                    host: {
                        '(click)': 'inputFocus()',
                        '(focus)': 'inputFocus()',
                        '(input)': 'inputChange($event.target.value)'
                    }
                },] },
    ];
    /** @nocollapse */
    ColorPickerDirective.ctorParameters = function () { return [
        { type: Injector, },
        { type: ComponentFactoryResolver, },
        { type: ApplicationRef, },
        { type: ViewContainerRef, },
        { type: ElementRef, },
        { type: ColorPickerService, },
    ]; };
    ColorPickerDirective.propDecorators = {
        "colorPicker": [{ type: Input, args: ['colorPicker',] },],
        "cpToggle": [{ type: Input, args: ['cpToggle',] },],
        "cpPosition": [{ type: Input, args: ['cpPosition',] },],
        "cpPositionOffset": [{ type: Input, args: ['cpPositionOffset',] },],
        "cpPositionRelativeToArrow": [{ type: Input, args: ['cpPositionRelativeToArrow',] },],
        "cpOutputFormat": [{ type: Input, args: ['cpOutputFormat',] },],
        "cpPresetLabel": [{ type: Input, args: ['cpPresetLabel',] },],
        "cpPresetEmptyMessage": [{ type: Input, args: ['cpPresetEmptyMessage',] },],
        "cpPresetEmptyMessageClass": [{ type: Input, args: ['cpPresetEmptyMessageClass',] },],
        "cpPresetColors": [{ type: Input, args: ['cpPresetColors',] },],
        "cpMaxPresetColorsLength": [{ type: Input, args: ['cpMaxPresetColorsLength',] },],
        "cpCancelButton": [{ type: Input, args: ['cpCancelButton',] },],
        "cpCancelButtonClass": [{ type: Input, args: ['cpCancelButtonClass',] },],
        "cpCancelButtonText": [{ type: Input, args: ['cpCancelButtonText',] },],
        "cpOKButton": [{ type: Input, args: ['cpOKButton',] },],
        "cpOKButtonClass": [{ type: Input, args: ['cpOKButtonClass',] },],
        "cpOKButtonText": [{ type: Input, args: ['cpOKButtonText',] },],
        "cpAddColorButton": [{ type: Input, args: ['cpAddColorButton',] },],
        "cpAddColorButtonClass": [{ type: Input, args: ['cpAddColorButtonClass',] },],
        "cpAddColorButtonText": [{ type: Input, args: ['cpAddColorButtonText',] },],
        "cpRemoveColorButtonClass": [{ type: Input, args: ['cpRemoveColorButtonClass',] },],
        "cpFallbackColor": [{ type: Input, args: ['cpFallbackColor',] },],
        "cpHeight": [{ type: Input, args: ['cpHeight',] },],
        "cpWidth": [{ type: Input, args: ['cpWidth',] },],
        "cpIgnoredElements": [{ type: Input, args: ['cpIgnoredElements',] },],
        "cpDisableInput": [{ type: Input, args: ['cpDisableInput',] },],
        "cpDialogDisplay": [{ type: Input, args: ['cpDialogDisplay',] },],
        "cpSaveClickOutside": [{ type: Input, args: ['cpSaveClickOutside',] },],
        "cpAlphaChannel": [{ type: Input, args: ['cpAlphaChannel',] },],
        "cpUseRootViewContainer": [{ type: Input, args: ['cpUseRootViewContainer',] },],
        "cpInputChange": [{ type: Output, args: ['cpInputChange',] },],
        "cpToggleChange": [{ type: Output, args: ['cpToggleChange',] },],
        "cpSliderChange": [{ type: Output, args: ['cpSliderChange',] },],
        "cpSliderDragEnd": [{ type: Output, args: ['cpSliderDragEnd',] },],
        "cpSliderDragStart": [{ type: Output, args: ['cpSliderDragStart',] },],
        "colorPickerCancel": [{ type: Output, args: ['colorPickerCancel',] },],
        "colorPickerSelect": [{ type: Output, args: ['colorPickerSelect',] },],
        "colorPickerChange": [{ type: Output, args: ['colorPickerChange',] },],
        "presetColorsChange": [{ type: Output, args: ['cpPresetColorsChange',] },],
    };
    return ColorPickerDirective;
}());
export { ColorPickerDirective };
function ColorPickerDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ColorPickerDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ColorPickerDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ColorPickerDirective.propDecorators;
    /** @type {?} */
    ColorPickerDirective.prototype.colorPicker;
    /** @type {?} */
    ColorPickerDirective.prototype.cpToggle;
    /** @type {?} */
    ColorPickerDirective.prototype.cpPosition;
    /** @type {?} */
    ColorPickerDirective.prototype.cpPositionOffset;
    /** @type {?} */
    ColorPickerDirective.prototype.cpPositionRelativeToArrow;
    /** @type {?} */
    ColorPickerDirective.prototype.cpOutputFormat;
    /** @type {?} */
    ColorPickerDirective.prototype.cpPresetLabel;
    /** @type {?} */
    ColorPickerDirective.prototype.cpPresetEmptyMessage;
    /** @type {?} */
    ColorPickerDirective.prototype.cpPresetEmptyMessageClass;
    /** @type {?} */
    ColorPickerDirective.prototype.cpPresetColors;
    /** @type {?} */
    ColorPickerDirective.prototype.cpMaxPresetColorsLength;
    /** @type {?} */
    ColorPickerDirective.prototype.cpCancelButton;
    /** @type {?} */
    ColorPickerDirective.prototype.cpCancelButtonClass;
    /** @type {?} */
    ColorPickerDirective.prototype.cpCancelButtonText;
    /** @type {?} */
    ColorPickerDirective.prototype.cpOKButton;
    /** @type {?} */
    ColorPickerDirective.prototype.cpOKButtonClass;
    /** @type {?} */
    ColorPickerDirective.prototype.cpOKButtonText;
    /** @type {?} */
    ColorPickerDirective.prototype.cpAddColorButton;
    /** @type {?} */
    ColorPickerDirective.prototype.cpAddColorButtonClass;
    /** @type {?} */
    ColorPickerDirective.prototype.cpAddColorButtonText;
    /** @type {?} */
    ColorPickerDirective.prototype.cpRemoveColorButtonClass;
    /** @type {?} */
    ColorPickerDirective.prototype.cpFallbackColor;
    /** @type {?} */
    ColorPickerDirective.prototype.cpHeight;
    /** @type {?} */
    ColorPickerDirective.prototype.cpWidth;
    /** @type {?} */
    ColorPickerDirective.prototype.cpIgnoredElements;
    /** @type {?} */
    ColorPickerDirective.prototype.cpDisableInput;
    /** @type {?} */
    ColorPickerDirective.prototype.cpDialogDisplay;
    /** @type {?} */
    ColorPickerDirective.prototype.cpSaveClickOutside;
    /** @type {?} */
    ColorPickerDirective.prototype.cpAlphaChannel;
    /** @type {?} */
    ColorPickerDirective.prototype.cpUseRootViewContainer;
    /** @type {?} */
    ColorPickerDirective.prototype.cpInputChange;
    /** @type {?} */
    ColorPickerDirective.prototype.cpToggleChange;
    /** @type {?} */
    ColorPickerDirective.prototype.cpSliderChange;
    /** @type {?} */
    ColorPickerDirective.prototype.cpSliderDragEnd;
    /** @type {?} */
    ColorPickerDirective.prototype.cpSliderDragStart;
    /** @type {?} */
    ColorPickerDirective.prototype.colorPickerCancel;
    /** @type {?} */
    ColorPickerDirective.prototype.colorPickerSelect;
    /** @type {?} */
    ColorPickerDirective.prototype.colorPickerChange;
    /** @type {?} */
    ColorPickerDirective.prototype.presetColorsChange;
    /** @type {?} */
    ColorPickerDirective.prototype.dialog;
    /** @type {?} */
    ColorPickerDirective.prototype.created;
    /** @type {?} */
    ColorPickerDirective.prototype.ignoreChanges;
    /** @type {?} */
    ColorPickerDirective.prototype.cmpRef;
    /** @type {?} */
    ColorPickerDirective.prototype.injector;
    /** @type {?} */
    ColorPickerDirective.prototype.cfr;
    /** @type {?} */
    ColorPickerDirective.prototype.appRef;
    /** @type {?} */
    ColorPickerDirective.prototype.vcRef;
    /** @type {?} */
    ColorPickerDirective.prototype.elRef;
    /** @type {?} */
    ColorPickerDirective.prototype.service;
}
//# sourceMappingURL=color-picker.directive.js.map